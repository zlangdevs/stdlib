...
We might add some compiler feature to have just INFINITY
and do fancy stuff like INFINITY, -INFINITY for negative
and positive infinity
...

fun is_inf(x: f64) >> bool {
    return x == POS_INFINITY || x == NEG_INFINITY
}

u64 POS_INFINITY = null;  ?? There is no way to represent INFINITY in decimal
u64 NEG_INFINITY = null;  ?? (surprice)

fun abs(x: i64) >> i64 {
    if x < 0 {
        return -x;
    } else {
        return x;
    }
}

fun fabs(x: f64) >> f64 {
    if x < 0.0 {
        return -x;
    } else {
        return x;
    }
}

fun sqrt(x: f64) >> f64 {
    if x < 0 {
        return -1;
    }

    f64 a = x;
    f64 b = (a + 1) / 2;

    for b < a {
        a = b;
        b = (a + x / a) / 2;
    }

    return a;
}

fun pow(a: f64, b: i64) >> f64 {
    f64 res = 1.0;
    i32 exp = abs(b) as i32;

    f64 base = a;

    if base < 0 {base = 1.0 / base;}
    if b == 0 {return 1.0;}

    if a == 0.0 {
        if b > 0 { return 0.0; }
        else { return POS_INFINITY as f64; }
    }

    if b == 1.0 || base == -1.0 {
        return 1.0;
    }

    for exp > 0 {
        if (exp % 2) == 1 {res *= base;}
        base *= base;
        exp /= 2;
    }

    return res;
}

fun floor(x: f64) >> f64 {
    f64 xt = trunc(x);
    f64 diff = x - xt;

    if diff >= 0.5 || diff <= -0.5 {
        return xt + 1.0;
    }

    return xt;
}

fun trunc(x: f64) >> f64 {
    return (x as i64) as f64;
}
